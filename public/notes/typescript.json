{
	"id": "typescript",
	"path": "notes/typescript.md",
	"title": "TypeScript",
	"html": "\u003ch1\u003eTypeScript\u003c/h1\u003e\n\u003cp\u003eTypeScript is an open-source language which builds on \u003ca href=\"javascript\"\u003eJavaScript\u003c/a\u003e, one of the world’s most used tools, by adding static type definitions.\u003c/p\u003e\n\u003cp\u003eTypes provide a way to describe the shape of an object, providing better documentation, and allowing TypeScript to validate that your code is working correctly.\u003c/p\u003e\n\u003cp\u003eWriting types can be optional in TypeScript, because type inference allows you to get a lot of power without writing additional code.\u003c/p\u003e\n\u003ch2\u003eA Result You Can Trust\u003c/h2\u003e\n\u003cp\u003eAll valid JavaScript code is also TypeScript code. You might get type-checking errors, but that won't stop you from running the resulting JavaScript. While you can go for stricter behavior, that means you're still in control.\u003c/p\u003e\n\u003cp\u003eTypeScript code is transformed into JavaScript code via the TypeScript compiler or \u003ca href=\"babel\"\u003eBabel\u003c/a\u003e. This JavaScript is clean, simple code which runs anywhere JavaScript runs: In a browser, on \u003ca href=\"node-js\"\u003eNode.JS\u003c/a\u003e or in your apps.\u003c/p\u003e\n\u003ch2\u003eGradual Adoption\u003c/h2\u003e\n\u003cp\u003eAdopting TypeScript is not a binary choice, you can start by annotating existing JavaScript with JSDoc, then switch a few files to be checked by TypeScript and over time prepare your codebase to convert completely.\u003c/p\u003e\n\u003cp\u003eTypeScript’s type inference means that you don’t have to annotate your code until you want more safety.\u003c/p\u003e\n",
	"front_matter": {},
	"backlink_note_ids": [
		"assemblyscript"
	],
	"linked_note_ids": [
		"babel",
		"node-js",
		"javascript"
	]
}